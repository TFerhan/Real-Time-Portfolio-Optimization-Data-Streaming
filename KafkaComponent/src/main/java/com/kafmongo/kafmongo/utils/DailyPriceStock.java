/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafmongo.kafmongo.utils;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DailyPriceStock extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1747218198627286753L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DailyPriceStock\",\"namespace\":\"com.kafmongo.kafmongo.utils\",\"fields\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"created\",\"type\":\"string\"},{\"name\":\"ratioConsolide\",\"type\":\"string\"},{\"name\":\"totalTrades\",\"type\":\"string\"},{\"name\":\"coursCourant\",\"type\":\"string\"},{\"name\":\"libelleFR\",\"type\":\"string\"},{\"name\":\"openingPrice\",\"type\":\"string\"},{\"name\":\"lowPrice\",\"type\":\"string\"},{\"name\":\"coursAjuste\",\"type\":\"string\"},{\"name\":\"highPrice\",\"type\":\"string\"},{\"name\":\"closingPrice\",\"type\":\"string\"},{\"name\":\"cumulTitresEchanges\",\"type\":\"string\"},{\"name\":\"capitalisation\",\"type\":\"string\"},{\"name\":\"cumulVolumeEchange\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DailyPriceStock> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DailyPriceStock> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DailyPriceStock> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DailyPriceStock> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DailyPriceStock> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DailyPriceStock to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DailyPriceStock from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DailyPriceStock instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DailyPriceStock fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence ticker;
  private java.lang.CharSequence created;
  private java.lang.CharSequence ratioConsolide;
  private java.lang.CharSequence totalTrades;
  private java.lang.CharSequence coursCourant;
  private java.lang.CharSequence libelleFR;
  private java.lang.CharSequence openingPrice;
  private java.lang.CharSequence lowPrice;
  private java.lang.CharSequence coursAjuste;
  private java.lang.CharSequence highPrice;
  private java.lang.CharSequence closingPrice;
  private java.lang.CharSequence cumulTitresEchanges;
  private java.lang.CharSequence capitalisation;
  private java.lang.CharSequence cumulVolumeEchange;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DailyPriceStock() {}

  /**
   * All-args constructor.
   * @param ticker The new value for ticker
   * @param created The new value for created
   * @param ratioConsolide The new value for ratioConsolide
   * @param totalTrades The new value for totalTrades
   * @param coursCourant The new value for coursCourant
   * @param libelleFR The new value for libelleFR
   * @param openingPrice The new value for openingPrice
   * @param lowPrice The new value for lowPrice
   * @param coursAjuste The new value for coursAjuste
   * @param highPrice The new value for highPrice
   * @param closingPrice The new value for closingPrice
   * @param cumulTitresEchanges The new value for cumulTitresEchanges
   * @param capitalisation The new value for capitalisation
   * @param cumulVolumeEchange The new value for cumulVolumeEchange
   */
  public DailyPriceStock(java.lang.CharSequence ticker, java.lang.CharSequence created, java.lang.CharSequence ratioConsolide, java.lang.CharSequence totalTrades, java.lang.CharSequence coursCourant, java.lang.CharSequence libelleFR, java.lang.CharSequence openingPrice, java.lang.CharSequence lowPrice, java.lang.CharSequence coursAjuste, java.lang.CharSequence highPrice, java.lang.CharSequence closingPrice, java.lang.CharSequence cumulTitresEchanges, java.lang.CharSequence capitalisation, java.lang.CharSequence cumulVolumeEchange) {
    this.ticker = ticker;
    this.created = created;
    this.ratioConsolide = ratioConsolide;
    this.totalTrades = totalTrades;
    this.coursCourant = coursCourant;
    this.libelleFR = libelleFR;
    this.openingPrice = openingPrice;
    this.lowPrice = lowPrice;
    this.coursAjuste = coursAjuste;
    this.highPrice = highPrice;
    this.closingPrice = closingPrice;
    this.cumulTitresEchanges = cumulTitresEchanges;
    this.capitalisation = capitalisation;
    this.cumulVolumeEchange = cumulVolumeEchange;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ticker;
    case 1: return created;
    case 2: return ratioConsolide;
    case 3: return totalTrades;
    case 4: return coursCourant;
    case 5: return libelleFR;
    case 6: return openingPrice;
    case 7: return lowPrice;
    case 8: return coursAjuste;
    case 9: return highPrice;
    case 10: return closingPrice;
    case 11: return cumulTitresEchanges;
    case 12: return capitalisation;
    case 13: return cumulVolumeEchange;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ticker = (java.lang.CharSequence)value$; break;
    case 1: created = (java.lang.CharSequence)value$; break;
    case 2: ratioConsolide = (java.lang.CharSequence)value$; break;
    case 3: totalTrades = (java.lang.CharSequence)value$; break;
    case 4: coursCourant = (java.lang.CharSequence)value$; break;
    case 5: libelleFR = (java.lang.CharSequence)value$; break;
    case 6: openingPrice = (java.lang.CharSequence)value$; break;
    case 7: lowPrice = (java.lang.CharSequence)value$; break;
    case 8: coursAjuste = (java.lang.CharSequence)value$; break;
    case 9: highPrice = (java.lang.CharSequence)value$; break;
    case 10: closingPrice = (java.lang.CharSequence)value$; break;
    case 11: cumulTitresEchanges = (java.lang.CharSequence)value$; break;
    case 12: capitalisation = (java.lang.CharSequence)value$; break;
    case 13: cumulVolumeEchange = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ticker' field.
   * @return The value of the 'ticker' field.
   */
  public java.lang.CharSequence getTicker() {
    return ticker;
  }


  /**
   * Sets the value of the 'ticker' field.
   * @param value the value to set.
   */
  public void setTicker(java.lang.CharSequence value) {
    this.ticker = value;
  }

  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public java.lang.CharSequence getCreated() {
    return created;
  }


  /**
   * Sets the value of the 'created' field.
   * @param value the value to set.
   */
  public void setCreated(java.lang.CharSequence value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'ratioConsolide' field.
   * @return The value of the 'ratioConsolide' field.
   */
  public java.lang.CharSequence getRatioConsolide() {
    return ratioConsolide;
  }


  /**
   * Sets the value of the 'ratioConsolide' field.
   * @param value the value to set.
   */
  public void setRatioConsolide(java.lang.CharSequence value) {
    this.ratioConsolide = value;
  }

  /**
   * Gets the value of the 'totalTrades' field.
   * @return The value of the 'totalTrades' field.
   */
  public java.lang.CharSequence getTotalTrades() {
    return totalTrades;
  }


  /**
   * Sets the value of the 'totalTrades' field.
   * @param value the value to set.
   */
  public void setTotalTrades(java.lang.CharSequence value) {
    this.totalTrades = value;
  }

  /**
   * Gets the value of the 'coursCourant' field.
   * @return The value of the 'coursCourant' field.
   */
  public java.lang.CharSequence getCoursCourant() {
    return coursCourant;
  }


  /**
   * Sets the value of the 'coursCourant' field.
   * @param value the value to set.
   */
  public void setCoursCourant(java.lang.CharSequence value) {
    this.coursCourant = value;
  }

  /**
   * Gets the value of the 'libelleFR' field.
   * @return The value of the 'libelleFR' field.
   */
  public java.lang.CharSequence getLibelleFR() {
    return libelleFR;
  }


  /**
   * Sets the value of the 'libelleFR' field.
   * @param value the value to set.
   */
  public void setLibelleFR(java.lang.CharSequence value) {
    this.libelleFR = value;
  }

  /**
   * Gets the value of the 'openingPrice' field.
   * @return The value of the 'openingPrice' field.
   */
  public java.lang.CharSequence getOpeningPrice() {
    return openingPrice;
  }


  /**
   * Sets the value of the 'openingPrice' field.
   * @param value the value to set.
   */
  public void setOpeningPrice(java.lang.CharSequence value) {
    this.openingPrice = value;
  }

  /**
   * Gets the value of the 'lowPrice' field.
   * @return The value of the 'lowPrice' field.
   */
  public java.lang.CharSequence getLowPrice() {
    return lowPrice;
  }


  /**
   * Sets the value of the 'lowPrice' field.
   * @param value the value to set.
   */
  public void setLowPrice(java.lang.CharSequence value) {
    this.lowPrice = value;
  }

  /**
   * Gets the value of the 'coursAjuste' field.
   * @return The value of the 'coursAjuste' field.
   */
  public java.lang.CharSequence getCoursAjuste() {
    return coursAjuste;
  }


  /**
   * Sets the value of the 'coursAjuste' field.
   * @param value the value to set.
   */
  public void setCoursAjuste(java.lang.CharSequence value) {
    this.coursAjuste = value;
  }

  /**
   * Gets the value of the 'highPrice' field.
   * @return The value of the 'highPrice' field.
   */
  public java.lang.CharSequence getHighPrice() {
    return highPrice;
  }


  /**
   * Sets the value of the 'highPrice' field.
   * @param value the value to set.
   */
  public void setHighPrice(java.lang.CharSequence value) {
    this.highPrice = value;
  }

  /**
   * Gets the value of the 'closingPrice' field.
   * @return The value of the 'closingPrice' field.
   */
  public java.lang.CharSequence getClosingPrice() {
    return closingPrice;
  }


  /**
   * Sets the value of the 'closingPrice' field.
   * @param value the value to set.
   */
  public void setClosingPrice(java.lang.CharSequence value) {
    this.closingPrice = value;
  }

  /**
   * Gets the value of the 'cumulTitresEchanges' field.
   * @return The value of the 'cumulTitresEchanges' field.
   */
  public java.lang.CharSequence getCumulTitresEchanges() {
    return cumulTitresEchanges;
  }


  /**
   * Sets the value of the 'cumulTitresEchanges' field.
   * @param value the value to set.
   */
  public void setCumulTitresEchanges(java.lang.CharSequence value) {
    this.cumulTitresEchanges = value;
  }

  /**
   * Gets the value of the 'capitalisation' field.
   * @return The value of the 'capitalisation' field.
   */
  public java.lang.CharSequence getCapitalisation() {
    return capitalisation;
  }


  /**
   * Sets the value of the 'capitalisation' field.
   * @param value the value to set.
   */
  public void setCapitalisation(java.lang.CharSequence value) {
    this.capitalisation = value;
  }

  /**
   * Gets the value of the 'cumulVolumeEchange' field.
   * @return The value of the 'cumulVolumeEchange' field.
   */
  public java.lang.CharSequence getCumulVolumeEchange() {
    return cumulVolumeEchange;
  }


  /**
   * Sets the value of the 'cumulVolumeEchange' field.
   * @param value the value to set.
   */
  public void setCumulVolumeEchange(java.lang.CharSequence value) {
    this.cumulVolumeEchange = value;
  }

  /**
   * Creates a new DailyPriceStock RecordBuilder.
   * @return A new DailyPriceStock RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.DailyPriceStock.Builder newBuilder() {
    return new com.kafmongo.kafmongo.utils.DailyPriceStock.Builder();
  }

  /**
   * Creates a new DailyPriceStock RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DailyPriceStock RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.DailyPriceStock.Builder newBuilder(com.kafmongo.kafmongo.utils.DailyPriceStock.Builder other) {
    if (other == null) {
      return new com.kafmongo.kafmongo.utils.DailyPriceStock.Builder();
    } else {
      return new com.kafmongo.kafmongo.utils.DailyPriceStock.Builder(other);
    }
  }

  /**
   * Creates a new DailyPriceStock RecordBuilder by copying an existing DailyPriceStock instance.
   * @param other The existing instance to copy.
   * @return A new DailyPriceStock RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.DailyPriceStock.Builder newBuilder(com.kafmongo.kafmongo.utils.DailyPriceStock other) {
    if (other == null) {
      return new com.kafmongo.kafmongo.utils.DailyPriceStock.Builder();
    } else {
      return new com.kafmongo.kafmongo.utils.DailyPriceStock.Builder(other);
    }
  }

  /**
   * RecordBuilder for DailyPriceStock instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DailyPriceStock>
    implements org.apache.avro.data.RecordBuilder<DailyPriceStock> {

    private java.lang.CharSequence ticker;
    private java.lang.CharSequence created;
    private java.lang.CharSequence ratioConsolide;
    private java.lang.CharSequence totalTrades;
    private java.lang.CharSequence coursCourant;
    private java.lang.CharSequence libelleFR;
    private java.lang.CharSequence openingPrice;
    private java.lang.CharSequence lowPrice;
    private java.lang.CharSequence coursAjuste;
    private java.lang.CharSequence highPrice;
    private java.lang.CharSequence closingPrice;
    private java.lang.CharSequence cumulTitresEchanges;
    private java.lang.CharSequence capitalisation;
    private java.lang.CharSequence cumulVolumeEchange;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafmongo.kafmongo.utils.DailyPriceStock.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ticker)) {
        this.ticker = data().deepCopy(fields()[0].schema(), other.ticker);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.created)) {
        this.created = data().deepCopy(fields()[1].schema(), other.created);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ratioConsolide)) {
        this.ratioConsolide = data().deepCopy(fields()[2].schema(), other.ratioConsolide);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalTrades)) {
        this.totalTrades = data().deepCopy(fields()[3].schema(), other.totalTrades);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.coursCourant)) {
        this.coursCourant = data().deepCopy(fields()[4].schema(), other.coursCourant);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.libelleFR)) {
        this.libelleFR = data().deepCopy(fields()[5].schema(), other.libelleFR);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.openingPrice)) {
        this.openingPrice = data().deepCopy(fields()[6].schema(), other.openingPrice);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[7].schema(), other.lowPrice);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.coursAjuste)) {
        this.coursAjuste = data().deepCopy(fields()[8].schema(), other.coursAjuste);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[9].schema(), other.highPrice);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.closingPrice)) {
        this.closingPrice = data().deepCopy(fields()[10].schema(), other.closingPrice);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.cumulTitresEchanges)) {
        this.cumulTitresEchanges = data().deepCopy(fields()[11].schema(), other.cumulTitresEchanges);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.capitalisation)) {
        this.capitalisation = data().deepCopy(fields()[12].schema(), other.capitalisation);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.cumulVolumeEchange)) {
        this.cumulVolumeEchange = data().deepCopy(fields()[13].schema(), other.cumulVolumeEchange);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing DailyPriceStock instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafmongo.kafmongo.utils.DailyPriceStock other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ticker)) {
        this.ticker = data().deepCopy(fields()[0].schema(), other.ticker);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created)) {
        this.created = data().deepCopy(fields()[1].schema(), other.created);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ratioConsolide)) {
        this.ratioConsolide = data().deepCopy(fields()[2].schema(), other.ratioConsolide);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalTrades)) {
        this.totalTrades = data().deepCopy(fields()[3].schema(), other.totalTrades);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.coursCourant)) {
        this.coursCourant = data().deepCopy(fields()[4].schema(), other.coursCourant);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.libelleFR)) {
        this.libelleFR = data().deepCopy(fields()[5].schema(), other.libelleFR);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.openingPrice)) {
        this.openingPrice = data().deepCopy(fields()[6].schema(), other.openingPrice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[7].schema(), other.lowPrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.coursAjuste)) {
        this.coursAjuste = data().deepCopy(fields()[8].schema(), other.coursAjuste);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[9].schema(), other.highPrice);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.closingPrice)) {
        this.closingPrice = data().deepCopy(fields()[10].schema(), other.closingPrice);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.cumulTitresEchanges)) {
        this.cumulTitresEchanges = data().deepCopy(fields()[11].schema(), other.cumulTitresEchanges);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.capitalisation)) {
        this.capitalisation = data().deepCopy(fields()[12].schema(), other.capitalisation);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.cumulVolumeEchange)) {
        this.cumulVolumeEchange = data().deepCopy(fields()[13].schema(), other.cumulVolumeEchange);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'ticker' field.
      * @return The value.
      */
    public java.lang.CharSequence getTicker() {
      return ticker;
    }


    /**
      * Sets the value of the 'ticker' field.
      * @param value The value of 'ticker'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setTicker(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ticker = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ticker' field has been set.
      * @return True if the 'ticker' field has been set, false otherwise.
      */
    public boolean hasTicker() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ticker' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearTicker() {
      ticker = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setCreated(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.created = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearCreated() {
      created = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ratioConsolide' field.
      * @return The value.
      */
    public java.lang.CharSequence getRatioConsolide() {
      return ratioConsolide;
    }


    /**
      * Sets the value of the 'ratioConsolide' field.
      * @param value The value of 'ratioConsolide'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setRatioConsolide(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ratioConsolide = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ratioConsolide' field has been set.
      * @return True if the 'ratioConsolide' field has been set, false otherwise.
      */
    public boolean hasRatioConsolide() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ratioConsolide' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearRatioConsolide() {
      ratioConsolide = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTrades' field.
      * @return The value.
      */
    public java.lang.CharSequence getTotalTrades() {
      return totalTrades;
    }


    /**
      * Sets the value of the 'totalTrades' field.
      * @param value The value of 'totalTrades'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setTotalTrades(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.totalTrades = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTrades' field has been set.
      * @return True if the 'totalTrades' field has been set, false otherwise.
      */
    public boolean hasTotalTrades() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalTrades' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearTotalTrades() {
      totalTrades = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'coursCourant' field.
      * @return The value.
      */
    public java.lang.CharSequence getCoursCourant() {
      return coursCourant;
    }


    /**
      * Sets the value of the 'coursCourant' field.
      * @param value The value of 'coursCourant'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setCoursCourant(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.coursCourant = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'coursCourant' field has been set.
      * @return True if the 'coursCourant' field has been set, false otherwise.
      */
    public boolean hasCoursCourant() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'coursCourant' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearCoursCourant() {
      coursCourant = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'libelleFR' field.
      * @return The value.
      */
    public java.lang.CharSequence getLibelleFR() {
      return libelleFR;
    }


    /**
      * Sets the value of the 'libelleFR' field.
      * @param value The value of 'libelleFR'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setLibelleFR(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.libelleFR = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'libelleFR' field has been set.
      * @return True if the 'libelleFR' field has been set, false otherwise.
      */
    public boolean hasLibelleFR() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'libelleFR' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearLibelleFR() {
      libelleFR = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'openingPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getOpeningPrice() {
      return openingPrice;
    }


    /**
      * Sets the value of the 'openingPrice' field.
      * @param value The value of 'openingPrice'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setOpeningPrice(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.openingPrice = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'openingPrice' field has been set.
      * @return True if the 'openingPrice' field has been set, false otherwise.
      */
    public boolean hasOpeningPrice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'openingPrice' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearOpeningPrice() {
      openingPrice = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lowPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getLowPrice() {
      return lowPrice;
    }


    /**
      * Sets the value of the 'lowPrice' field.
      * @param value The value of 'lowPrice'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setLowPrice(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.lowPrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lowPrice' field has been set.
      * @return True if the 'lowPrice' field has been set, false otherwise.
      */
    public boolean hasLowPrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'lowPrice' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearLowPrice() {
      lowPrice = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'coursAjuste' field.
      * @return The value.
      */
    public java.lang.CharSequence getCoursAjuste() {
      return coursAjuste;
    }


    /**
      * Sets the value of the 'coursAjuste' field.
      * @param value The value of 'coursAjuste'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setCoursAjuste(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.coursAjuste = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'coursAjuste' field has been set.
      * @return True if the 'coursAjuste' field has been set, false otherwise.
      */
    public boolean hasCoursAjuste() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'coursAjuste' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearCoursAjuste() {
      coursAjuste = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'highPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getHighPrice() {
      return highPrice;
    }


    /**
      * Sets the value of the 'highPrice' field.
      * @param value The value of 'highPrice'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setHighPrice(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.highPrice = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'highPrice' field has been set.
      * @return True if the 'highPrice' field has been set, false otherwise.
      */
    public boolean hasHighPrice() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'highPrice' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearHighPrice() {
      highPrice = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'closingPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getClosingPrice() {
      return closingPrice;
    }


    /**
      * Sets the value of the 'closingPrice' field.
      * @param value The value of 'closingPrice'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setClosingPrice(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.closingPrice = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'closingPrice' field has been set.
      * @return True if the 'closingPrice' field has been set, false otherwise.
      */
    public boolean hasClosingPrice() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'closingPrice' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearClosingPrice() {
      closingPrice = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'cumulTitresEchanges' field.
      * @return The value.
      */
    public java.lang.CharSequence getCumulTitresEchanges() {
      return cumulTitresEchanges;
    }


    /**
      * Sets the value of the 'cumulTitresEchanges' field.
      * @param value The value of 'cumulTitresEchanges'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setCumulTitresEchanges(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.cumulTitresEchanges = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'cumulTitresEchanges' field has been set.
      * @return True if the 'cumulTitresEchanges' field has been set, false otherwise.
      */
    public boolean hasCumulTitresEchanges() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'cumulTitresEchanges' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearCumulTitresEchanges() {
      cumulTitresEchanges = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'capitalisation' field.
      * @return The value.
      */
    public java.lang.CharSequence getCapitalisation() {
      return capitalisation;
    }


    /**
      * Sets the value of the 'capitalisation' field.
      * @param value The value of 'capitalisation'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setCapitalisation(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.capitalisation = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'capitalisation' field has been set.
      * @return True if the 'capitalisation' field has been set, false otherwise.
      */
    public boolean hasCapitalisation() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'capitalisation' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearCapitalisation() {
      capitalisation = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'cumulVolumeEchange' field.
      * @return The value.
      */
    public java.lang.CharSequence getCumulVolumeEchange() {
      return cumulVolumeEchange;
    }


    /**
      * Sets the value of the 'cumulVolumeEchange' field.
      * @param value The value of 'cumulVolumeEchange'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder setCumulVolumeEchange(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.cumulVolumeEchange = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'cumulVolumeEchange' field has been set.
      * @return True if the 'cumulVolumeEchange' field has been set, false otherwise.
      */
    public boolean hasCumulVolumeEchange() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'cumulVolumeEchange' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.DailyPriceStock.Builder clearCumulVolumeEchange() {
      cumulVolumeEchange = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DailyPriceStock build() {
      try {
        DailyPriceStock record = new DailyPriceStock();
        record.ticker = fieldSetFlags()[0] ? this.ticker : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.created = fieldSetFlags()[1] ? this.created : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ratioConsolide = fieldSetFlags()[2] ? this.ratioConsolide : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.totalTrades = fieldSetFlags()[3] ? this.totalTrades : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.coursCourant = fieldSetFlags()[4] ? this.coursCourant : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.libelleFR = fieldSetFlags()[5] ? this.libelleFR : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.openingPrice = fieldSetFlags()[6] ? this.openingPrice : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.lowPrice = fieldSetFlags()[7] ? this.lowPrice : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.coursAjuste = fieldSetFlags()[8] ? this.coursAjuste : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.highPrice = fieldSetFlags()[9] ? this.highPrice : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.closingPrice = fieldSetFlags()[10] ? this.closingPrice : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.cumulTitresEchanges = fieldSetFlags()[11] ? this.cumulTitresEchanges : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.capitalisation = fieldSetFlags()[12] ? this.capitalisation : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.cumulVolumeEchange = fieldSetFlags()[13] ? this.cumulVolumeEchange : (java.lang.CharSequence) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DailyPriceStock>
    WRITER$ = (org.apache.avro.io.DatumWriter<DailyPriceStock>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DailyPriceStock>
    READER$ = (org.apache.avro.io.DatumReader<DailyPriceStock>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ticker);

    out.writeString(this.created);

    out.writeString(this.ratioConsolide);

    out.writeString(this.totalTrades);

    out.writeString(this.coursCourant);

    out.writeString(this.libelleFR);

    out.writeString(this.openingPrice);

    out.writeString(this.lowPrice);

    out.writeString(this.coursAjuste);

    out.writeString(this.highPrice);

    out.writeString(this.closingPrice);

    out.writeString(this.cumulTitresEchanges);

    out.writeString(this.capitalisation);

    out.writeString(this.cumulVolumeEchange);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ticker = in.readString(this.ticker instanceof Utf8 ? (Utf8)this.ticker : null);

      this.created = in.readString(this.created instanceof Utf8 ? (Utf8)this.created : null);

      this.ratioConsolide = in.readString(this.ratioConsolide instanceof Utf8 ? (Utf8)this.ratioConsolide : null);

      this.totalTrades = in.readString(this.totalTrades instanceof Utf8 ? (Utf8)this.totalTrades : null);

      this.coursCourant = in.readString(this.coursCourant instanceof Utf8 ? (Utf8)this.coursCourant : null);

      this.libelleFR = in.readString(this.libelleFR instanceof Utf8 ? (Utf8)this.libelleFR : null);

      this.openingPrice = in.readString(this.openingPrice instanceof Utf8 ? (Utf8)this.openingPrice : null);

      this.lowPrice = in.readString(this.lowPrice instanceof Utf8 ? (Utf8)this.lowPrice : null);

      this.coursAjuste = in.readString(this.coursAjuste instanceof Utf8 ? (Utf8)this.coursAjuste : null);

      this.highPrice = in.readString(this.highPrice instanceof Utf8 ? (Utf8)this.highPrice : null);

      this.closingPrice = in.readString(this.closingPrice instanceof Utf8 ? (Utf8)this.closingPrice : null);

      this.cumulTitresEchanges = in.readString(this.cumulTitresEchanges instanceof Utf8 ? (Utf8)this.cumulTitresEchanges : null);

      this.capitalisation = in.readString(this.capitalisation instanceof Utf8 ? (Utf8)this.capitalisation : null);

      this.cumulVolumeEchange = in.readString(this.cumulVolumeEchange instanceof Utf8 ? (Utf8)this.cumulVolumeEchange : null);

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ticker = in.readString(this.ticker instanceof Utf8 ? (Utf8)this.ticker : null);
          break;

        case 1:
          this.created = in.readString(this.created instanceof Utf8 ? (Utf8)this.created : null);
          break;

        case 2:
          this.ratioConsolide = in.readString(this.ratioConsolide instanceof Utf8 ? (Utf8)this.ratioConsolide : null);
          break;

        case 3:
          this.totalTrades = in.readString(this.totalTrades instanceof Utf8 ? (Utf8)this.totalTrades : null);
          break;

        case 4:
          this.coursCourant = in.readString(this.coursCourant instanceof Utf8 ? (Utf8)this.coursCourant : null);
          break;

        case 5:
          this.libelleFR = in.readString(this.libelleFR instanceof Utf8 ? (Utf8)this.libelleFR : null);
          break;

        case 6:
          this.openingPrice = in.readString(this.openingPrice instanceof Utf8 ? (Utf8)this.openingPrice : null);
          break;

        case 7:
          this.lowPrice = in.readString(this.lowPrice instanceof Utf8 ? (Utf8)this.lowPrice : null);
          break;

        case 8:
          this.coursAjuste = in.readString(this.coursAjuste instanceof Utf8 ? (Utf8)this.coursAjuste : null);
          break;

        case 9:
          this.highPrice = in.readString(this.highPrice instanceof Utf8 ? (Utf8)this.highPrice : null);
          break;

        case 10:
          this.closingPrice = in.readString(this.closingPrice instanceof Utf8 ? (Utf8)this.closingPrice : null);
          break;

        case 11:
          this.cumulTitresEchanges = in.readString(this.cumulTitresEchanges instanceof Utf8 ? (Utf8)this.cumulTitresEchanges : null);
          break;

        case 12:
          this.capitalisation = in.readString(this.capitalisation instanceof Utf8 ? (Utf8)this.capitalisation : null);
          break;

        case 13:
          this.cumulVolumeEchange = in.readString(this.cumulVolumeEchange instanceof Utf8 ? (Utf8)this.cumulVolumeEchange : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










