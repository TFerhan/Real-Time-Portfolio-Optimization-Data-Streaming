/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafmongo.kafmongo.utils;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PortfolioMetrics extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5437937854065455664L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PortfolioMetrics\",\"namespace\":\"com.kafmongo.kafmongo.utils\",\"fields\":[{\"name\":\"risk\",\"type\":\"double\"},{\"name\":\"expectedReturn\",\"type\":\"double\"},{\"name\":\"sharpRatio\",\"type\":\"double\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PortfolioMetrics> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PortfolioMetrics> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PortfolioMetrics> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PortfolioMetrics> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PortfolioMetrics> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PortfolioMetrics to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PortfolioMetrics from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PortfolioMetrics instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PortfolioMetrics fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private double risk;
  private double expectedReturn;
  private double sharpRatio;
  private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PortfolioMetrics() {}

  /**
   * All-args constructor.
   * @param risk The new value for risk
   * @param expectedReturn The new value for expectedReturn
   * @param sharpRatio The new value for sharpRatio
   * @param timestamp The new value for timestamp
   */
  public PortfolioMetrics(java.lang.Double risk, java.lang.Double expectedReturn, java.lang.Double sharpRatio, java.lang.Long timestamp) {
    this.risk = risk;
    this.expectedReturn = expectedReturn;
    this.sharpRatio = sharpRatio;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return risk;
    case 1: return expectedReturn;
    case 2: return sharpRatio;
    case 3: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: risk = (java.lang.Double)value$; break;
    case 1: expectedReturn = (java.lang.Double)value$; break;
    case 2: sharpRatio = (java.lang.Double)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'risk' field.
   * @return The value of the 'risk' field.
   */
  public double getRisk() {
    return risk;
  }


  /**
   * Sets the value of the 'risk' field.
   * @param value the value to set.
   */
  public void setRisk(double value) {
    this.risk = value;
  }

  /**
   * Gets the value of the 'expectedReturn' field.
   * @return The value of the 'expectedReturn' field.
   */
  public double getExpectedReturn() {
    return expectedReturn;
  }


  /**
   * Sets the value of the 'expectedReturn' field.
   * @param value the value to set.
   */
  public void setExpectedReturn(double value) {
    this.expectedReturn = value;
  }

  /**
   * Gets the value of the 'sharpRatio' field.
   * @return The value of the 'sharpRatio' field.
   */
  public double getSharpRatio() {
    return sharpRatio;
  }


  /**
   * Sets the value of the 'sharpRatio' field.
   * @param value the value to set.
   */
  public void setSharpRatio(double value) {
    this.sharpRatio = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new PortfolioMetrics RecordBuilder.
   * @return A new PortfolioMetrics RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder newBuilder() {
    return new com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder();
  }

  /**
   * Creates a new PortfolioMetrics RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PortfolioMetrics RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder newBuilder(com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder other) {
    if (other == null) {
      return new com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder();
    } else {
      return new com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder(other);
    }
  }

  /**
   * Creates a new PortfolioMetrics RecordBuilder by copying an existing PortfolioMetrics instance.
   * @param other The existing instance to copy.
   * @return A new PortfolioMetrics RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder newBuilder(com.kafmongo.kafmongo.utils.PortfolioMetrics other) {
    if (other == null) {
      return new com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder();
    } else {
      return new com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder(other);
    }
  }

  /**
   * RecordBuilder for PortfolioMetrics instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PortfolioMetrics>
    implements org.apache.avro.data.RecordBuilder<PortfolioMetrics> {

    private double risk;
    private double expectedReturn;
    private double sharpRatio;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.risk)) {
        this.risk = data().deepCopy(fields()[0].schema(), other.risk);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.expectedReturn)) {
        this.expectedReturn = data().deepCopy(fields()[1].schema(), other.expectedReturn);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sharpRatio)) {
        this.sharpRatio = data().deepCopy(fields()[2].schema(), other.sharpRatio);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing PortfolioMetrics instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafmongo.kafmongo.utils.PortfolioMetrics other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.risk)) {
        this.risk = data().deepCopy(fields()[0].schema(), other.risk);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.expectedReturn)) {
        this.expectedReturn = data().deepCopy(fields()[1].schema(), other.expectedReturn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sharpRatio)) {
        this.sharpRatio = data().deepCopy(fields()[2].schema(), other.sharpRatio);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'risk' field.
      * @return The value.
      */
    public double getRisk() {
      return risk;
    }


    /**
      * Sets the value of the 'risk' field.
      * @param value The value of 'risk'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder setRisk(double value) {
      validate(fields()[0], value);
      this.risk = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'risk' field has been set.
      * @return True if the 'risk' field has been set, false otherwise.
      */
    public boolean hasRisk() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'risk' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder clearRisk() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'expectedReturn' field.
      * @return The value.
      */
    public double getExpectedReturn() {
      return expectedReturn;
    }


    /**
      * Sets the value of the 'expectedReturn' field.
      * @param value The value of 'expectedReturn'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder setExpectedReturn(double value) {
      validate(fields()[1], value);
      this.expectedReturn = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'expectedReturn' field has been set.
      * @return True if the 'expectedReturn' field has been set, false otherwise.
      */
    public boolean hasExpectedReturn() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'expectedReturn' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder clearExpectedReturn() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sharpRatio' field.
      * @return The value.
      */
    public double getSharpRatio() {
      return sharpRatio;
    }


    /**
      * Sets the value of the 'sharpRatio' field.
      * @param value The value of 'sharpRatio'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder setSharpRatio(double value) {
      validate(fields()[2], value);
      this.sharpRatio = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sharpRatio' field has been set.
      * @return True if the 'sharpRatio' field has been set, false otherwise.
      */
    public boolean hasSharpRatio() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sharpRatio' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder clearSharpRatio() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioMetrics.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PortfolioMetrics build() {
      try {
        PortfolioMetrics record = new PortfolioMetrics();
        record.risk = fieldSetFlags()[0] ? this.risk : (java.lang.Double) defaultValue(fields()[0]);
        record.expectedReturn = fieldSetFlags()[1] ? this.expectedReturn : (java.lang.Double) defaultValue(fields()[1]);
        record.sharpRatio = fieldSetFlags()[2] ? this.sharpRatio : (java.lang.Double) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PortfolioMetrics>
    WRITER$ = (org.apache.avro.io.DatumWriter<PortfolioMetrics>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PortfolioMetrics>
    READER$ = (org.apache.avro.io.DatumReader<PortfolioMetrics>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.risk);

    out.writeDouble(this.expectedReturn);

    out.writeDouble(this.sharpRatio);

    out.writeLong(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.risk = in.readDouble();

      this.expectedReturn = in.readDouble();

      this.sharpRatio = in.readDouble();

      this.timestamp = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.risk = in.readDouble();
          break;

        case 1:
          this.expectedReturn = in.readDouble();
          break;

        case 2:
          this.sharpRatio = in.readDouble();
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










