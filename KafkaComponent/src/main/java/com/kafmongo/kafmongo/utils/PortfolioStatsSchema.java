/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafmongo.kafmongo.utils;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PortfolioStatsSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4939629108603711334L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PortfolioStatsSchema\",\"namespace\":\"com.kafmongo.kafmongo.utils\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"portfolio_id\",\"type\":\"string\"},{\"name\":\"meanReturns\",\"type\":{\"type\":\"map\",\"values\":\"double\"}},{\"name\":\"covarianceMatrix\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"map\",\"values\":\"double\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PortfolioStatsSchema> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PortfolioStatsSchema> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PortfolioStatsSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PortfolioStatsSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PortfolioStatsSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PortfolioStatsSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PortfolioStatsSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PortfolioStatsSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PortfolioStatsSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long timestamp;
  private java.lang.CharSequence portfolio_id;
  private java.util.Map<java.lang.CharSequence,java.lang.Double> meanReturns;
  private java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> covarianceMatrix;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PortfolioStatsSchema() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param portfolio_id The new value for portfolio_id
   * @param meanReturns The new value for meanReturns
   * @param covarianceMatrix The new value for covarianceMatrix
   */
  public PortfolioStatsSchema(java.lang.Long timestamp, java.lang.CharSequence portfolio_id, java.util.Map<java.lang.CharSequence,java.lang.Double> meanReturns, java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> covarianceMatrix) {
    this.timestamp = timestamp;
    this.portfolio_id = portfolio_id;
    this.meanReturns = meanReturns;
    this.covarianceMatrix = covarianceMatrix;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return portfolio_id;
    case 2: return meanReturns;
    case 3: return covarianceMatrix;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: portfolio_id = (java.lang.CharSequence)value$; break;
    case 2: meanReturns = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 3: covarianceMatrix = (java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'portfolio_id' field.
   * @return The value of the 'portfolio_id' field.
   */
  public java.lang.CharSequence getPortfolioId() {
    return portfolio_id;
  }


  /**
   * Sets the value of the 'portfolio_id' field.
   * @param value the value to set.
   */
  public void setPortfolioId(java.lang.CharSequence value) {
    this.portfolio_id = value;
  }

  /**
   * Gets the value of the 'meanReturns' field.
   * @return The value of the 'meanReturns' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMeanReturns() {
    return meanReturns;
  }


  /**
   * Sets the value of the 'meanReturns' field.
   * @param value the value to set.
   */
  public void setMeanReturns(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.meanReturns = value;
  }

  /**
   * Gets the value of the 'covarianceMatrix' field.
   * @return The value of the 'covarianceMatrix' field.
   */
  public java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> getCovarianceMatrix() {
    return covarianceMatrix;
  }


  /**
   * Sets the value of the 'covarianceMatrix' field.
   * @param value the value to set.
   */
  public void setCovarianceMatrix(java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> value) {
    this.covarianceMatrix = value;
  }

  /**
   * Creates a new PortfolioStatsSchema RecordBuilder.
   * @return A new PortfolioStatsSchema RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder newBuilder() {
    return new com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder();
  }

  /**
   * Creates a new PortfolioStatsSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PortfolioStatsSchema RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder newBuilder(com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder other) {
    if (other == null) {
      return new com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder();
    } else {
      return new com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder(other);
    }
  }

  /**
   * Creates a new PortfolioStatsSchema RecordBuilder by copying an existing PortfolioStatsSchema instance.
   * @param other The existing instance to copy.
   * @return A new PortfolioStatsSchema RecordBuilder
   */
  public static com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder newBuilder(com.kafmongo.kafmongo.utils.PortfolioStatsSchema other) {
    if (other == null) {
      return new com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder();
    } else {
      return new com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for PortfolioStatsSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PortfolioStatsSchema>
    implements org.apache.avro.data.RecordBuilder<PortfolioStatsSchema> {

    private long timestamp;
    private java.lang.CharSequence portfolio_id;
    private java.util.Map<java.lang.CharSequence,java.lang.Double> meanReturns;
    private java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> covarianceMatrix;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.portfolio_id)) {
        this.portfolio_id = data().deepCopy(fields()[1].schema(), other.portfolio_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.meanReturns)) {
        this.meanReturns = data().deepCopy(fields()[2].schema(), other.meanReturns);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.covarianceMatrix)) {
        this.covarianceMatrix = data().deepCopy(fields()[3].schema(), other.covarianceMatrix);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing PortfolioStatsSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafmongo.kafmongo.utils.PortfolioStatsSchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.portfolio_id)) {
        this.portfolio_id = data().deepCopy(fields()[1].schema(), other.portfolio_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.meanReturns)) {
        this.meanReturns = data().deepCopy(fields()[2].schema(), other.meanReturns);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.covarianceMatrix)) {
        this.covarianceMatrix = data().deepCopy(fields()[3].schema(), other.covarianceMatrix);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'portfolio_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getPortfolioId() {
      return portfolio_id;
    }


    /**
      * Sets the value of the 'portfolio_id' field.
      * @param value The value of 'portfolio_id'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder setPortfolioId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.portfolio_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'portfolio_id' field has been set.
      * @return True if the 'portfolio_id' field has been set, false otherwise.
      */
    public boolean hasPortfolioId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'portfolio_id' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder clearPortfolioId() {
      portfolio_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'meanReturns' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMeanReturns() {
      return meanReturns;
    }


    /**
      * Sets the value of the 'meanReturns' field.
      * @param value The value of 'meanReturns'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder setMeanReturns(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[2], value);
      this.meanReturns = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'meanReturns' field has been set.
      * @return True if the 'meanReturns' field has been set, false otherwise.
      */
    public boolean hasMeanReturns() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'meanReturns' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder clearMeanReturns() {
      meanReturns = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'covarianceMatrix' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> getCovarianceMatrix() {
      return covarianceMatrix;
    }


    /**
      * Sets the value of the 'covarianceMatrix' field.
      * @param value The value of 'covarianceMatrix'.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder setCovarianceMatrix(java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> value) {
      validate(fields()[3], value);
      this.covarianceMatrix = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'covarianceMatrix' field has been set.
      * @return True if the 'covarianceMatrix' field has been set, false otherwise.
      */
    public boolean hasCovarianceMatrix() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'covarianceMatrix' field.
      * @return This builder.
      */
    public com.kafmongo.kafmongo.utils.PortfolioStatsSchema.Builder clearCovarianceMatrix() {
      covarianceMatrix = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PortfolioStatsSchema build() {
      try {
        PortfolioStatsSchema record = new PortfolioStatsSchema();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.portfolio_id = fieldSetFlags()[1] ? this.portfolio_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.meanReturns = fieldSetFlags()[2] ? this.meanReturns : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[2]);
        record.covarianceMatrix = fieldSetFlags()[3] ? this.covarianceMatrix : (java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PortfolioStatsSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<PortfolioStatsSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PortfolioStatsSchema>
    READER$ = (org.apache.avro.io.DatumReader<PortfolioStatsSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    out.writeString(this.portfolio_id);

    long size0 = this.meanReturns.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e0: this.meanReturns.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.Double v0 = e0.getValue();
      out.writeDouble(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.covarianceMatrix.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.util.Map<java.lang.CharSequence,java.lang.Double>> e1: this.covarianceMatrix.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.util.Map<java.lang.CharSequence,java.lang.Double> v1 = e1.getValue();
      long size2 = v1.size();
      out.writeMapStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e2: v1.entrySet()) {
        actualSize2++;
        out.startItem();
        out.writeString(e2.getKey());
        java.lang.Double v2 = e2.getValue();
        out.writeDouble(v2);
      }
      out.writeMapEnd();
      if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      this.portfolio_id = in.readString(this.portfolio_id instanceof Utf8 ? (Utf8)this.portfolio_id : null);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.Double> m0 = this.meanReturns; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size0);
        this.meanReturns = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.Double v0 = null;
          v0 = in.readDouble();
          m0.put(k0, v0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> m1 = this.covarianceMatrix; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>>((int)size1);
        this.covarianceMatrix = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.util.Map<java.lang.CharSequence,java.lang.Double> v1 = null;
          long size2 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.Double> m2 = v1; // Need fresh name due to limitation of macro system
          if (m2 == null) {
            m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size2);
            v1 = m2;
          } else m2.clear();
          for ( ; 0 < size2; size2 = in.mapNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.CharSequence k2 = null;
              k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
              java.lang.Double v2 = null;
              v2 = in.readDouble();
              m2.put(k2, v2);
            }
          }
          m1.put(k1, v1);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          this.portfolio_id = in.readString(this.portfolio_id instanceof Utf8 ? (Utf8)this.portfolio_id : null);
          break;

        case 2:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.Double> m0 = this.meanReturns; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size0);
            this.meanReturns = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.Double v0 = null;
              v0 = in.readDouble();
              m0.put(k0, v0);
            }
          }
          break;

        case 3:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>> m1 = this.covarianceMatrix; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.util.Map<java.lang.CharSequence,java.lang.Double>>((int)size1);
            this.covarianceMatrix = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.util.Map<java.lang.CharSequence,java.lang.Double> v1 = null;
              long size2 = in.readMapStart();
              java.util.Map<java.lang.CharSequence,java.lang.Double> m2 = v1; // Need fresh name due to limitation of macro system
              if (m2 == null) {
                m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size2);
                v1 = m2;
              } else m2.clear();
              for ( ; 0 < size2; size2 = in.mapNext()) {
                for ( ; size2 != 0; size2--) {
                  java.lang.CharSequence k2 = null;
                  k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
                  java.lang.Double v2 = null;
                  v2 = in.readDouble();
                  m2.put(k2, v2);
                }
              }
              m1.put(k1, v1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










